
// Constants
const TALENT_API_KEY = process.env.NEXT_PUBLIC_TALENT_API_KEY || 'API_KEY'; // Use environment variables
const TALENT_API_URL = 'https://api.talentprotocol.com/v1';

const PlayerPosition = {
  GOALKEEPER: 'GK',
  CENTER_BACK: 'CB',
  RIGHT_BACK: 'RB',
  LEFT_BACK: 'LB',
  CENTER_MID: 'CM',
  RIGHT_WING: 'RW',
  LEFT_WING: 'LW',
  STRIKER: 'ST'
};

const PositionLimits = {
  [PlayerPosition.GOALKEEPER]: 2,
  [PlayerPosition.CENTER_BACK]: 6,
  [PlayerPosition.RIGHT_BACK]: 2,
  [PlayerPosition.LEFT_BACK]: 2,
  [PlayerPosition.CENTER_MID]: 6,
  [PlayerPosition.RIGHT_WING]: 2,
  [PlayerPosition.LEFT_WING]: 2,
  [PlayerPosition.STRIKER]: 3
};

const TeamBuilder = () => {
  const [friends, setFriends] = useState([]);
  const [selectedPlayers, setSelectedPlayers] = useState([]);
  const [formation, setFormation] = useState('4-3-3');
  const [step, setStep] = useState(1);

  // Fetch friends (mock API call)
  useEffect(() => {
    const fetchFriends = async () => {
      try {
        // Replace with actual API call
        const mockFriends = [
          { id: 1, username: 'user1', avatar: '/api/placeholder/50/50' },
          { id: 2, username: 'user2', avatar: '/api/placeholder/50/50' },
          { id: 3, username: 'user3', avatar: '/api/placeholder/50/50' }
        ];
        setFriends(mockFriends);
      } catch (error) {
        console.error('Error fetching friends:', error);
      }
    };

    fetchFriends();
  }, []);

  // Fetch Build Score from Talent Protocol
  const getBuildScore = async (address) => {
    try {
      const response = await fetch(`${TALENT_API_URL}/talent-passports/${address}`, {
        headers: { Authorization: `Bearer ${TALENT_API_KEY}` }
      });
      if (!response.ok) throw new Error('Failed to fetch build score');
      const data = await response.json();
      return data.build_score || Math.random() * 100; // Fallback for demo
    } catch (error) {
      console.error('Error fetching build score:', error);
      return Math.random() * 100; // Fallback for demo
    }
  };

  // Add a player to the team
  const addPlayer = async (friend, position) => {
    if (selectedPlayers.length >= 20) {
      alert('Maximum team size reached (20 players)');
      return;
    }

    const buildScore = await getBuildScore(friend.address);
    setSelectedPlayers((prevPlayers) => [...prevPlayers, { ...friend, position, buildScore }]);
  };

  // Remove a player from the team
  const removePlayer = (id) => {
    setSelectedPlayers((prevPlayers) => prevPlayers.filter((player) => player.id !== id));
  };

  // Calculate player positions based on formation
  const getPlayerPosition = (index, formation) => {
    const positions = {
      '4-3-3': [
        { x: 50, y: 90 }, // GK
        { x: 20, y: 70 }, // LB
        { x: 40, y: 70 }, // CB
        { x: 60, y: 70 }, // CB
        { x: 80, y: 70 }, // RB
        { x: 30, y: 50 }, // CM
        { x: 50, y: 50 }, // CM
        { x: 70, y: 50 }, // CM
        { x: 20, y: 30 }, // LW
        { x: 50, y: 20 }, // ST
        { x: 80, y: 30 }  // RW
      ],
      '4-4-2': [
        { x: 50, y: 90 }, // GK
        { x: 20, y: 70 }, // LB
        { x: 40, y: 70 }, // CB
        { x: 60, y: 70 }, // CB
        { x: 80, y: 70 }, // RB
        { x: 20, y: 50 }, // LM
        { x: 40, y: 50 }, // CM
        { x: 60, y: 50 }, // CM
        { x: 80, y: 50 }, // RM
        { x: 35, y: 30 }, // ST
        { x: 65, y: 30 }  // ST
      ],
      '3-5-2': [
        { x: 50, y: 90 }, // GK
        { x: 30, y: 70 }, // CB
        { x: 50, y: 70 }, // CB
        { x: 70, y: 70 }, // CB
        { x: 20, y: 50 }, // LM
        { x: 40, y: 50 }, // CM
        { x: 60, y: 50 }, // CM
        { x: 80, y: 50 }, // RM
        { x: 35, y: 30 }, // ST
        { x: 65, y: 30 }  // ST
      ]
    };
    return positions[formation][index] || { x: 50, y: 50 };
  };

  // Render the football field with players
  const renderFootballField = () => (
    <div className="relative w-full h-96 bg-green-600 rounded-lg p-4">
      {/* Field markings */}
      <div className="absolute inset-0 border-2 border-white rounded-lg">
        <div className="absolute left-1/2 top-0 bottom-0 w-px bg-white transform -translate-x-1/2" />
        <div className="absolute top-1/2 left-0 right-0 h-px bg-white transform -translate-y-1/2" />
        <div
