
          >
            <img
              src={player.avatar}
              alt={`${player.username} avatar`}
              className="w-10 h-10 rounded-full border-2 border-white"
            />
            <span className="block text-xs text-white text-center mt-1">
              {player.username}
            </span>
          </div>
        );
      })}
    </div>
  );

  // Render friend selection
  const renderFriendSelection = () => (
    <div className="grid grid-cols-3 gap-4">
      {friends.map(friend => (
        <Card key={friend.id}>
          <CardHeader className="flex flex-col items-center">
            <img
              src={friend.avatar}
              alt={`${friend.username} avatar`}
              className="w-16 h-16 rounded-full"
            />
            <h3 className="text-center">{friend.username}</h3>
          </CardHeader>
          <CardContent>
            <Button
              onClick={() => addPlayer(friend, PlayerPosition.STRIKER)}
              className="w-full"
            >
              Add as Striker
            </Button>
          </CardContent>
        </Card>
      ))}
    </div>
  );

  // Render selected players
  const renderSelectedPlayers = () => (
    <div className="grid grid-cols-5 gap-4">
      {selectedPlayers.map(player => (
        <Card key={player.id}>
          <CardHeader className="flex flex-col items-center">
            <img
              src={player.avatar}
              alt={`${player.username} avatar`}
              className="w-12 h-12 rounded-full"
            />
            <h3 className="text-center">{player.username}</h3>
            <p className="text-sm text-center">Build Score: {player.buildScore.toFixed(2)}</p>
          </CardHeader>
          <CardContent>
            <Button
              onClick={() => removePlayer(player.id)}
              variant="destructive"
              className="w-full"
            >
              Remove
            </Button>
          </CardContent>
        </Card>
      ))}
    </div>
  );

  // Render steps
  const renderStep = () => {
    switch (step) {
      case 1:
        return (
          <>
            <h2 className="text-2xl font-bold mb-4">Select Players</h2>
            {renderFriendSelection()}
            <Button onClick={() => setStep(2)} className="mt-4">
              Next
            </Button>
          </>
        );
      case 2:
        return (
          <>
            <h2 className="text-2xl font-bold mb-4">Your Team</h2>
            {renderSelectedPlayers()}
            <Button onClick={() => setStep(3)} className="mt-4">
              Build Formation
            </Button>
          </>
        );
      case 3:
        return (
          <>
            <h2 className="text-2xl font-bold mb-4">Team Formation</h2>
            <select
              value={formation}
              onChange={(e) => setFormation(e.target.value)}
              className="block w-full mb-4 p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="4-3-3">4-3-3</option>
              <option value="4-4-2">4-4-2</option>
              <option value="3-5-2">3-5-2</option>
            </select>
            {renderFootballField()}
          </>
        );
      default:
        return null;
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-4">
      <h1 className="text-3xl font-bold mb-8">Team Builder</h1>
      {renderStep()}
    </div>
  );
};

export default TeamBuilder;
