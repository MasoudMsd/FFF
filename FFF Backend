

// Environment variables
const CONTRACT_ABI = [
  "function mintTeamNFT(address to, string[] memory players, uint256[] memory buildScores)"
];
const CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS;
const PRIVATE_KEY = process.env.PRIVATE_KEY;
const RPC_URL = process.env.RPC_URL;

if (!CONTRACT_ADDRESS || !PRIVATE_KEY || !RPC_URL) {
  throw new Error('Missing required environment variables');
}

// Middleware to parse JSON bodies
app.use(express.json());

// Route to serve the initial frame
app.get('/api/frame', async (req, res) => {
  const { fid } = req.query;

  if (!fid) {
    return res.status(400).json({ error: 'Missing fid parameter' });
  }

  try {
    const frame = frames.create({
      buttons: [
        {
          label: 'Start Building Team',
          action: 'post',
          target: '/api/start'
        }
      ],
      image: {
        src: '/api/placeholder/600/400',
        aspectRatio: '3:2'
      },
      postUrl: `${process.env.HOST}/api/frame`
    });

    res.send(frame);
  } catch (error) {
    console.error('Error creating frame:', error.message);
    res.status(500).json({ error: 'Failed to create frame' });
  }
});

// Helper function for minting NFTs
async function mintNFT(address, players, buildScores) {
  try {
    const provider = new ethers.providers.JsonRpcProvider(RPC_URL);
    const wallet = new ethers.Wallet(PRIVATE_KEY, provider);
    const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, wallet);

    // Validate inputs
    if (!ethers.utils.isAddress(address)) {
      throw new Error('Invalid Ethereum address');
    }

    if (players.length !== buildScores.length) {
      throw new Error('Players and buildScores arrays must have the same length');
    }

    // Mint the NFT
    const tx = await contract.mintTeamNFT(address, players, buildScores);
    await tx.wait(); // Wait for transaction confirmation

    return tx.hash;
  } catch (error) {
    console.error('Error minting NFT:', error.message);
    throw error;
  }
}

// Route to mint NFTs
app.post('/api/mint-team', async (req, res) => {
  const { address, players, buildScores } = req.body;

  // Validate required fields
  if (!address || !players || !buildScores) {
    return res.status(400).json({ error: 'Missing required fields: address, players, or buildScores' });
  }

  try {
    const txHash = await mintNFT(address, players, buildScores);
    res.json({ success: true, txHash });
  } catch (error) {
    res.status(500).json({ error: error.message || 'Failed to mint NFT' });
  }
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Frame server running on port ${PORT}`);
});
